import Head from "next/head";
import { ScrapeContext } from "../contexts/ScrapeContext"
import { useContext, useEffect, useState } from "react";
import { AuthContext } from "@/contexts/AuthContex";
import { Box, Button, IconButton, LinearProgress, Modal, Skeleton, Typography } from "@mui/material";
import { ThemeContext } from "@/contexts/ThemeContext";
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import FavoriteIcon from '@mui/icons-material/Favorite';
import { FavoritesContext } from "@/contexts/FavoritesContext";
import CloseIcon from '@mui/icons-material/Close';
import Link from "next/link";

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 4,
}
const Home = () => {
  const { datas, getRandomData, productsByCategory } = useContext(ScrapeContext)
  const { user } = useContext(AuthContext)
  const { systemTheme, setSystemTheme } = useContext(ThemeContext)
  const { addFavorite } = useContext(FavoritesContext)
  const [showMessage, setShowMessage] = useState(false);
  const [isFavorited, setIsFavorited] = useState(false);
  const [open, setOpen] = useState(false);
  const [showModal, setShowModal] = useState(false)

  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  useEffect(()=> {
    getRandomData()
    
    if(user) {
      const timer = setTimeout(() => {
        setShowMessage(true)
      }, 100)

      // Temizlik fonksiyonu
      return () => clearTimeout(timer);
    } else {
      const timer = setTimeout(() => {
        setShowMessage(true)
      }, 500)

      // Temizlik fonksiyonu
      return () => clearTimeout(timer);
    }
  }, [user])

  const isFavorite = (productId) => {
    console.log("isFavorite")
    if(user.emailVerified) {
      addFavorite(user.uid, productId)
      setIsFavorited(!isFavorited)
    } else {
      handleOpen()
    }
  };

  const isNotFavorite = (productId) => {
    addFavorite(user.uid, productId)
    setIsFavorited(!isFavorited)
  };

  return (
    <div style={{ color: systemTheme ? "red" : "black" }}>
      <Head>
        <title>PriceWise</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {
        showMessage ? (
          <div className="container-fluid home">
            <div className="cardRow">
              {
                datas ? datas.map((item) => 
                  <div key={item.id} className="col-md-3 mt-3 p-0">
                    <div className="homeCard">
                      <div className="favoriteButton" style={{ cursor: 'pointer' }}>
                          <FavoriteBorderIcon onClick={() => isFavorite(item.id)} sx={{ color: 'rgb(53, 212, 153)' }} />
                      </div>
                      
                      <img src={item.resim_url} className="productImage" alt={item.urunAdi} />
                        <h6 className="prdctName pt-4">{item.urunAdi.length > 30 ? item.urunAdi.substring(0, 30) + "..." : item.urunAdi}</h6>
                        <span style={{ color: systemTheme ? "red" : "black" }} className={`prdctPrice ${systemTheme && ``}`}>{item.fiyat} TL</span> <span>{item.sellers?.[0]?.saticiAdi}</span>
                    </div>
                  </div>
                ) : null
              }
            </div>
          </div>
        )
        : (
          <div className="skeleton" style={{ backgroundColor: systemTheme ? "black" : "rgb(246, 246, 246)" }}>
            <LinearProgress />
          </div>
        )
      }
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
        BackdropProps={{ onClick: (event) => event.stopPropagation() }}
        disableScrollLock={true}
      >
        <Box sx={style}>
          <IconButton
            onClick={handleClose}
            sx={{ position: 'absolute', top: 8, right: 8 }}
          >
            <CloseIcon />
          </IconButton>
          <Typography id="modal-modal-title" variant="h6" component="h2">
            E-posta adresi doğrulanmadı.
          </Typography>
          <Typography id="modal-modal-description" sx={{ mt: 2 }}>
            Lütfen E-posta adresinize gelen bağlantıya tıklayarak doğrulayın.
          </Typography>
          <div className="mt-3">
            <Button>
              <Link href="https://mail.google.com/" target="_blank">Gmail'e git</Link>
            </Button>
          </div>
          <div>
            <Button onClick={()=>signOutWithGoogle()}>Çıkış yap</Button>
          </div>
        </Box>
      </Modal>
    </div>
  );
}

export default Home
